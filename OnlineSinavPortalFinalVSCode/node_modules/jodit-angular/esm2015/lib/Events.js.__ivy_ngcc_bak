import { Output, EventEmitter, Directive } from '@angular/core';
// tslint:disable-next-line:directive-class-suffix
export class Events {
    constructor() {
        // tslint:disable:no-output-on-prefix
        this.onChange = new EventEmitter();
        this.onBeforeEnter = new EventEmitter(false);
        this.onKeydown = new EventEmitter(false);
        this.onMousedown = new EventEmitter(false);
        this.onClick = new EventEmitter(false);
        this.onFocus = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.onPaste = new EventEmitter(false);
        this.onResize = new EventEmitter();
        this.onBeforeCommand = new EventEmitter(false);
        this.onAfterCommand = new EventEmitter();
        this.onAfterExec = new EventEmitter();
        this.onAfterPaste = new EventEmitter();
        this.onChangeSelection = new EventEmitter();
    }
}
Events.decorators = [
    { type: Directive }
];
Events.propDecorators = {
    onChange: [{ type: Output }],
    onBeforeEnter: [{ type: Output }],
    onKeydown: [{ type: Output }],
    onMousedown: [{ type: Output }],
    onClick: [{ type: Output }],
    onFocus: [{ type: Output }],
    onBlur: [{ type: Output }],
    onPaste: [{ type: Output }],
    onResize: [{ type: Output }],
    onBeforeCommand: [{ type: Output }],
    onAfterCommand: [{ type: Output }],
    onAfterExec: [{ type: Output }],
    onAfterPaste: [{ type: Output }],
    onChangeSelection: [{ type: Output }]
};
export const validEvents = [
    'onChange',
    'onBeforeEnter',
    'onKeydown',
    'onMousedown',
    'onClick',
    'onFocus',
    'onBlur',
    'onPaste',
    'onResize',
    'onBeforeCommand',
    'onAfterCommand',
    'onAfterExec',
    'onAfterPaste',
    'onChangeSelection',
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvam9kaXQtYW5ndWxhci1saWIvc3JjL2xpYi9FdmVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUWhFLGtEQUFrRDtBQUNsRCxNQUFNLE9BQU8sTUFBTTtJQUZuQjtRQUdFLHFDQUFxQztRQUMzQixhQUFRLEdBQTJCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDdEQsa0JBQWEsR0FBMkIsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEUsY0FBUyxHQUEyQixJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxnQkFBVyxHQUEyQixJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5RCxZQUFPLEdBQTJCLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFELFlBQU8sR0FBMkIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNyRCxXQUFNLEdBQTJCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDcEQsWUFBTyxHQUEyQixJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxRCxhQUFRLEdBQTJCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDdEQsb0JBQWUsR0FBMkIsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEUsbUJBQWMsR0FBMkIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM1RCxnQkFBVyxHQUEyQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3pELGlCQUFZLEdBQTJCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDMUQsc0JBQWlCLEdBQTJCLElBQUksWUFBWSxFQUFFLENBQUM7SUFDM0UsQ0FBQzs7O1lBbEJBLFNBQVM7Ozt1QkFJUCxNQUFNOzRCQUNOLE1BQU07d0JBQ04sTUFBTTswQkFDTixNQUFNO3NCQUNOLE1BQU07c0JBQ04sTUFBTTtxQkFDTixNQUFNO3NCQUNOLE1BQU07dUJBQ04sTUFBTTs4QkFDTixNQUFNOzZCQUNOLE1BQU07MEJBQ04sTUFBTTsyQkFDTixNQUFNO2dDQUNOLE1BQU07O0FBSVQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFxQjtJQUMzQyxVQUFVO0lBQ1YsZUFBZTtJQUNmLFdBQVc7SUFDWCxhQUFhO0lBQ2IsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLGFBQWE7SUFDYixjQUFjO0lBQ2QsbUJBQW1CO0NBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPdXRwdXQsIEV2ZW50RW1pdHRlciwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50T2JqIHtcclxuICBhcmdzOiBhbnlbXTtcclxuICBlZGl0b3I6IGFueTtcclxufVxyXG5cclxuQERpcmVjdGl2ZSgpXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XHJcbmV4cG9ydCBjbGFzcyBFdmVudHMge1xyXG4gIC8vIHRzbGludDpkaXNhYmxlOm5vLW91dHB1dC1vbi1wcmVmaXhcclxuICBAT3V0cHV0KCkgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxFdmVudE9iaj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIG9uQmVmb3JlRW50ZXI6IEV2ZW50RW1pdHRlcjxFdmVudE9iaj4gPSBuZXcgRXZlbnRFbWl0dGVyKGZhbHNlKTtcclxuICBAT3V0cHV0KCkgb25LZXlkb3duOiBFdmVudEVtaXR0ZXI8RXZlbnRPYmo+ID0gbmV3IEV2ZW50RW1pdHRlcihmYWxzZSk7XHJcbiAgQE91dHB1dCgpIG9uTW91c2Vkb3duOiBFdmVudEVtaXR0ZXI8RXZlbnRPYmo+ID0gbmV3IEV2ZW50RW1pdHRlcihmYWxzZSk7XHJcbiAgQE91dHB1dCgpIG9uQ2xpY2s6IEV2ZW50RW1pdHRlcjxFdmVudE9iaj4gPSBuZXcgRXZlbnRFbWl0dGVyKGZhbHNlKTtcclxuICBAT3V0cHV0KCkgb25Gb2N1czogRXZlbnRFbWl0dGVyPEV2ZW50T2JqPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgb25CbHVyOiBFdmVudEVtaXR0ZXI8RXZlbnRPYmo+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBvblBhc3RlOiBFdmVudEVtaXR0ZXI8RXZlbnRPYmo+ID0gbmV3IEV2ZW50RW1pdHRlcihmYWxzZSk7XHJcbiAgQE91dHB1dCgpIG9uUmVzaXplOiBFdmVudEVtaXR0ZXI8RXZlbnRPYmo+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBvbkJlZm9yZUNvbW1hbmQ6IEV2ZW50RW1pdHRlcjxFdmVudE9iaj4gPSBuZXcgRXZlbnRFbWl0dGVyKGZhbHNlKTtcclxuICBAT3V0cHV0KCkgb25BZnRlckNvbW1hbmQ6IEV2ZW50RW1pdHRlcjxFdmVudE9iaj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIG9uQWZ0ZXJFeGVjOiBFdmVudEVtaXR0ZXI8RXZlbnRPYmo+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBvbkFmdGVyUGFzdGU6IEV2ZW50RW1pdHRlcjxFdmVudE9iaj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIG9uQ2hhbmdlU2VsZWN0aW9uOiBFdmVudEVtaXR0ZXI8RXZlbnRPYmo+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IHZhbGlkRXZlbnRzOiAoa2V5b2YgRXZlbnRzKVtdID0gW1xyXG4gICdvbkNoYW5nZScsXHJcbiAgJ29uQmVmb3JlRW50ZXInLFxyXG4gICdvbktleWRvd24nLFxyXG4gICdvbk1vdXNlZG93bicsXHJcbiAgJ29uQ2xpY2snLFxyXG4gICdvbkZvY3VzJyxcclxuICAnb25CbHVyJyxcclxuICAnb25QYXN0ZScsXHJcbiAgJ29uUmVzaXplJyxcclxuICAnb25CZWZvcmVDb21tYW5kJyxcclxuICAnb25BZnRlckNvbW1hbmQnLFxyXG4gICdvbkFmdGVyRXhlYycsXHJcbiAgJ29uQWZ0ZXJQYXN0ZScsXHJcbiAgJ29uQ2hhbmdlU2VsZWN0aW9uJyxcclxuXTtcclxuIl19