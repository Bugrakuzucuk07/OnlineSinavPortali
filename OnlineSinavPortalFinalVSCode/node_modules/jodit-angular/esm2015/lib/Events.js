import { Output, EventEmitter, Directive } from '@angular/core';
// tslint:disable-next-line:directive-class-suffix
import * as ɵngcc0 from '@angular/core';
export class Events {
    constructor() {
        // tslint:disable:no-output-on-prefix
        this.onChange = new EventEmitter();
        this.onBeforeEnter = new EventEmitter(false);
        this.onKeydown = new EventEmitter(false);
        this.onMousedown = new EventEmitter(false);
        this.onClick = new EventEmitter(false);
        this.onFocus = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.onPaste = new EventEmitter(false);
        this.onResize = new EventEmitter();
        this.onBeforeCommand = new EventEmitter(false);
        this.onAfterCommand = new EventEmitter();
        this.onAfterExec = new EventEmitter();
        this.onAfterPaste = new EventEmitter();
        this.onChangeSelection = new EventEmitter();
    }
}
Events.ɵfac = function Events_Factory(t) { return new (t || Events)(); };
Events.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Events, outputs: { onChange: "onChange", onBeforeEnter: "onBeforeEnter", onKeydown: "onKeydown", onMousedown: "onMousedown", onClick: "onClick", onFocus: "onFocus", onBlur: "onBlur", onPaste: "onPaste", onResize: "onResize", onBeforeCommand: "onBeforeCommand", onAfterCommand: "onAfterCommand", onAfterExec: "onAfterExec", onAfterPaste: "onAfterPaste", onChangeSelection: "onChangeSelection" } });
Events.propDecorators = {
    onChange: [{ type: Output }],
    onBeforeEnter: [{ type: Output }],
    onKeydown: [{ type: Output }],
    onMousedown: [{ type: Output }],
    onClick: [{ type: Output }],
    onFocus: [{ type: Output }],
    onBlur: [{ type: Output }],
    onPaste: [{ type: Output }],
    onResize: [{ type: Output }],
    onBeforeCommand: [{ type: Output }],
    onAfterCommand: [{ type: Output }],
    onAfterExec: [{ type: Output }],
    onAfterPaste: [{ type: Output }],
    onChangeSelection: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Events, [{
        type: Directive
    }], function () { return []; }, { onChange: [{
            type: Output
        }], onBeforeEnter: [{
            type: Output
        }], onKeydown: [{
            type: Output
        }], onMousedown: [{
            type: Output
        }], onClick: [{
            type: Output
        }], onFocus: [{
            type: Output
        }], onBlur: [{
            type: Output
        }], onPaste: [{
            type: Output
        }], onResize: [{
            type: Output
        }], onBeforeCommand: [{
            type: Output
        }], onAfterCommand: [{
            type: Output
        }], onAfterExec: [{
            type: Output
        }], onAfterPaste: [{
            type: Output
        }], onChangeSelection: [{
            type: Output
        }] }); })();
export const validEvents = [
    'onChange',
    'onBeforeEnter',
    'onKeydown',
    'onMousedown',
    'onClick',
    'onFocus',
    'onBlur',
    'onPaste',
    'onResize',
    'onBeforeCommand',
    'onAfterCommand',
    'onAfterExec',
    'onAfterPaste',
    'onChangeSelection',
];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRzLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9qb2RpdC1hbmd1bGFyLWxpYi9zcmMvbGliL0V2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRaEUsa0RBQWtEOztBQUNsRCxNQUFNLE9BQU8sTUFBTTtBQUNuQixJQUhBO0FBQ0csUUFFRCxxQ0FBcUM7QUFDdkMsUUFBWSxhQUFRLEdBQTJCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDbEUsUUFBWSxrQkFBYSxHQUEyQixJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1RSxRQUFZLGNBQVMsR0FBMkIsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEUsUUFBWSxnQkFBVyxHQUEyQixJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxRSxRQUFZLFlBQU8sR0FBMkIsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEUsUUFBWSxZQUFPLEdBQTJCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDakUsUUFBWSxXQUFNLEdBQTJCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDaEUsUUFBWSxZQUFPLEdBQTJCLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3RFLFFBQVksYUFBUSxHQUEyQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ2xFLFFBQVksb0JBQWUsR0FBMkIsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUUsUUFBWSxtQkFBYyxHQUEyQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3hFLFFBQVksZ0JBQVcsR0FBMkIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNyRSxRQUFZLGlCQUFZLEdBQTJCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDdEUsUUFBWSxzQkFBaUIsR0FBMkIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUMzRSxJQUFBLENBQUM7QUFDRDtrQ0FuQkMsU0FBUzs0YkFDUjtBQUFDO0FBQTBCLHVCQUcxQixNQUFNO0FBQUssNEJBQ1gsTUFBTTtBQUFLLHdCQUNYLE1BQU07QUFBSywwQkFDWCxNQUFNO0FBQUssc0JBQ1gsTUFBTTtBQUFLLHNCQUNYLE1BQU07QUFBSyxxQkFDWCxNQUFNO0FBQUssc0JBQ1gsTUFBTTtBQUFLLHVCQUNYLE1BQU07QUFBSyw4QkFDWCxNQUFNO0FBQUssNkJBQ1gsTUFBTTtBQUFLLDBCQUNYLE1BQU07QUFBSywyQkFDWCxNQUFNO0FBQUssZ0NBQ1gsTUFBTTtBQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBSWYsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFxQjtBQUM3QyxJQUFFLFVBQVU7QUFDWixJQUFFLGVBQWU7QUFDakIsSUFBRSxXQUFXO0FBQ2IsSUFBRSxhQUFhO0FBQ2YsSUFBRSxTQUFTO0FBQ1gsSUFBRSxTQUFTO0FBQ1gsSUFBRSxRQUFRO0FBQ1YsSUFBRSxTQUFTO0FBQ1gsSUFBRSxVQUFVO0FBQ1osSUFBRSxpQkFBaUI7QUFDbkIsSUFBRSxnQkFBZ0I7QUFDbEIsSUFBRSxhQUFhO0FBQ2YsSUFBRSxjQUFjO0FBQ2hCLElBQUUsbUJBQW1CO0FBQ3JCLENBQUMsQ0FBQztBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFdmVudE9iaiB7XHJcbiAgYXJnczogYW55W107XHJcbiAgZWRpdG9yOiBhbnk7XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoKVxyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxyXG5leHBvcnQgY2xhc3MgRXZlbnRzIHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZTpuby1vdXRwdXQtb24tcHJlZml4XHJcbiAgQE91dHB1dCgpIG9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RXZlbnRPYmo+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBvbkJlZm9yZUVudGVyOiBFdmVudEVtaXR0ZXI8RXZlbnRPYmo+ID0gbmV3IEV2ZW50RW1pdHRlcihmYWxzZSk7XHJcbiAgQE91dHB1dCgpIG9uS2V5ZG93bjogRXZlbnRFbWl0dGVyPEV2ZW50T2JqPiA9IG5ldyBFdmVudEVtaXR0ZXIoZmFsc2UpO1xyXG4gIEBPdXRwdXQoKSBvbk1vdXNlZG93bjogRXZlbnRFbWl0dGVyPEV2ZW50T2JqPiA9IG5ldyBFdmVudEVtaXR0ZXIoZmFsc2UpO1xyXG4gIEBPdXRwdXQoKSBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8RXZlbnRPYmo+ID0gbmV3IEV2ZW50RW1pdHRlcihmYWxzZSk7XHJcbiAgQE91dHB1dCgpIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxFdmVudE9iaj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIG9uQmx1cjogRXZlbnRFbWl0dGVyPEV2ZW50T2JqPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgb25QYXN0ZTogRXZlbnRFbWl0dGVyPEV2ZW50T2JqPiA9IG5ldyBFdmVudEVtaXR0ZXIoZmFsc2UpO1xyXG4gIEBPdXRwdXQoKSBvblJlc2l6ZTogRXZlbnRFbWl0dGVyPEV2ZW50T2JqPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgb25CZWZvcmVDb21tYW5kOiBFdmVudEVtaXR0ZXI8RXZlbnRPYmo+ID0gbmV3IEV2ZW50RW1pdHRlcihmYWxzZSk7XHJcbiAgQE91dHB1dCgpIG9uQWZ0ZXJDb21tYW5kOiBFdmVudEVtaXR0ZXI8RXZlbnRPYmo+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBvbkFmdGVyRXhlYzogRXZlbnRFbWl0dGVyPEV2ZW50T2JqPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgb25BZnRlclBhc3RlOiBFdmVudEVtaXR0ZXI8RXZlbnRPYmo+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBvbkNoYW5nZVNlbGVjdGlvbjogRXZlbnRFbWl0dGVyPEV2ZW50T2JqPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCB2YWxpZEV2ZW50czogKGtleW9mIEV2ZW50cylbXSA9IFtcclxuICAnb25DaGFuZ2UnLFxyXG4gICdvbkJlZm9yZUVudGVyJyxcclxuICAnb25LZXlkb3duJyxcclxuICAnb25Nb3VzZWRvd24nLFxyXG4gICdvbkNsaWNrJyxcclxuICAnb25Gb2N1cycsXHJcbiAgJ29uQmx1cicsXHJcbiAgJ29uUGFzdGUnLFxyXG4gICdvblJlc2l6ZScsXHJcbiAgJ29uQmVmb3JlQ29tbWFuZCcsXHJcbiAgJ29uQWZ0ZXJDb21tYW5kJyxcclxuICAnb25BZnRlckV4ZWMnLFxyXG4gICdvbkFmdGVyUGFzdGUnLFxyXG4gICdvbkNoYW5nZVNlbGVjdGlvbicsXHJcbl07XHJcbiJdfQ==